###############################################################################
# Basic compilation settings                                                  #
###############################################################################

# C compiler
# ==========================
#
# options: gcc, arm-***-gcc
# default: gcc
CC ?= gcc

# Debug or production build?
# ==========================
#
# Debug build: generates a debug.txt file with extensive information about the
# translation process and the execution of individual authorization and
# translation functions. Each translated opcode is also noted here.
#
# Production build: produces an optimized version without assertions.
#
# options: set either 'DEBUG = 1' or 'PRODUCTION = 1'
# default: PRODUCTION = 1
PRODUCTION = 1
#DEBUG = 1

# IA32 or ARM?
# ==========================
#
# options: ia32 or arm
# default: TARGET_ARCH = ia32
TARGET_ARCH ?= ia32

# Dump all generated code (debugging option)
# ==========================================
#
# Generates the files code_dump.txt and jmpTable_dump.txt. code_dump.txt
# contains a dump of the translated original code and the location where each
# translated instruction was stored. jmpTable_dump.txt contains a basic block
# mapping for each translated basic block from original to translated IP.
#
# default: # CLAGS += -DDUMP_GENERATED_CODE
#CFLAGS += -DDUMP_GENERATED_CODE

# Sleep a couple of secs if we fail (debugging option)
# ====================================================
#
# Prints an error message and starts an endless loop whenever an error happens.
# This allows the user to attach a debugger to the running program
# (e.g., gdb -p `pidof loader`).
#
# default: #export CFLAGS += -DSLEEP_ON_FAIL
#CFLAGS += -DSLEEP_ON_FAIL

# Should startup / shutdown messages be printed in debug mode?
# ============================================================
#
# default: #export CFLAGS += -DSILENT_STARTUP
#CFLAGS += -DSILENT_STARTUP


###############################################################################
# Performance Options                                                         #
###############################################################################

# Inline small leaf functions
# ===========================
#
# This optimization enables inlining of small leaf functions. If the leaf
# function that is targeted by a single call is smaller than INLINE_MAX_LENGTH
# and consists of a single basic block then we inline the the complete basic
# block and remove the call and return instructions to reduce overall overhead.
#
# default: CFLAGS += -DINLINE_CALLS
# status: unimplemented for ARM
CFLAGS += -DINLINE_CALLS

# Add a predictor for indirect control flow transfers
# ===================================================
#
# Use a predictor that caches the last two targets for indirect control flow
# transfers. The predictor also keeps a running count of mispredictions. If the
# number of mispredictions is higher than ICF_PREDICT_MAX_MISPREDICTIONS then
# the location of the indirect control flow transfer is dynamically rewritten
# into a regular fast lookup.
#
# default: CFLAGS += -DICF_PREDICT
# status: unimplemented for ARM
CFLAGS += -DICF_PREDICT

# Fast (mapping-)cache lookup
# ===========================
#
# Enables faster cache lookup by performing the whole cache scan on superficial
# no-hits in assembly without switching back to the binary translator domain.
#
# default: CFLAGS += -DFAST_CACHE_LOOKUP
# status: unimplemented for ARM
CFLAGS += -DFAST_CACHE_LOOKUP

##############################################################################
# Translation extensions and special features                                #
##############################################################################

# Enable LD_PRELOAD feature that hijacks control?
# ===============================================
#
# Enable automatic control-flow hi-jacking whenever a program loads
# (this function uses the LD_PRELOAD facilities of the dynamic loader)
#
# default: CFLAGS += -DHIJACKCONTROL
CFLAGS+= -DHIJACKCONTROL

# Redirect system calls to the authorization framework
# ====================================================
#
# Redirects all system calls to an authorization function. This is needed for
# signal redirection, signal handling, exception handling, thread creation
# handling, and process creation handling.
# Additionally this is useful in implementing security extensions.
#
# default: CFLAGS += -DAUTHORIZE_SYSCALLS
# status: partially implemented for ARM
CFLAGS += -DAUTHORIZE_SYSCALLS

# Check signals as well
# =====================
#
# Handles all signals. Installed signal handlers are redirected to a trampoline.
# Signals are caught and handled in a safe manner. This option should be enabled
# by default. Depends on AUTHORIZE_SYSCALLS.
#
# default: CFLAGS += -DHANDLE_SIGNALS
# status: unimplemented for ARM
CFLAGS += -DHANDLE_SIGNALS

# Handle thread-/process-based system calls (clone)
# =================================================
#
# Handles the creation of new threads. New threads are wrapped into a new
# instance of the binary translator. The BT takes care of the initialization
# task and also handles the inter-thread communication between the two
# BTs. Depends on HANDLE_SIGNALS and AUTHORIZE_SYSCALLS.
# You need this option if you want to use threads (e.g., clone system call).
# Otherwise your program will fail with a SEGFAULT (due to wrong stacks after
# the execution of the clone system call)
#
# default: CFLAGS += -DHANDLE_THREADS
# status: unimplemented for ARM
CFLAGS += -DHANDLE_THREADS


###############################################################################
# Implementation specific stuff, selects correct flags depending              #
# on choices from above                                                       #
###############################################################################
ifdef DEBUG
CFLAGS += -O2 -ggdb -Wall -Wextra -DDEBUG
LDFLAGS = -lpthread -nostartfiles -ldl
endif

ifdef PRODUCTION
CFLAGS += -O3 -Wall -Wextra -DNDEBUG
LDFLAGS += -O1 -nodefaultlibs -lgcc -nostartfiles \
       -fvisibility-inlines-hidden -Wl,-x,-z,nodelete,-z,nodlopen,-z,nodump
#       -Wl,-z,-noexecstack -nostartfiles
endif

# build i386 code
ifeq ($(TARGET_ARCH),ia32)
	I386 = -m32
else
	I386 =
endif
CFLAGS += $(I386)

# the new ARM code tries to be C99 compatible (experimental)
ifeq ($(TARGET_ARCH),arm)
	CFLAGS += -std=c99 -Wno-unused-but-set-variable -Wno-unused-function
endif
EXTRA_ARM_DISASSEMBLER_CFLAGS += -std=c99

# Path to the assembly generation DSL preprocessing step
DSL_PATH=../DSL/src/parse.py

# name of the library
IA32_LIBNAME = libia32fbt
ARM_LIBNAME = libarmfbt
ifeq ($(TARGET_ARCH),ia32)
	LIBNAME = $(IA32_LIBNAME)
else
	LIBNAME = $(ARM_LIBNAME)
endif
# major version
LIBVERS=0
# minor version
LIBMIN=3.1
